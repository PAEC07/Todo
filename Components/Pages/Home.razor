@page "/"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Web
@using Todo
@using Todo.Data
@using Todo.Models
@using Repository
@using TodoServiceNamespace




@inject ApplicationDbContext DbContext
@inject TodoIRepository IReposetory
@inject TodoService todoService

@rendermode InteractiveServer

<h3>TODOs</h3> 

<div class="mb-2">
    <input type="text" class="form-control mb-1" @bind="newTitle" placeholder="Neues TODO Titel" />
    <input type="text" class="form-control mb-1" @bind="newDiscription" placeholder="Neue Beschreibung" />
    <button class="btn btn-primary mb-2" @onclick="Add">Hinzufügen</button>

    <br />
    <button class="btn btn-warning mb-2" @onclick="() => TodoList = TodoList.OrderBy(t => t.Titel).ToList()" >Sortieren nach Titel</button>
    <butten class="btn btn-warning mb-2" @onclick="() => TodoList = TodoList.OrderBy(i => i.Id).ToList()">Sortiren nach ID</butten>
    <butten class="btn btn-warning mb-2" @onclick="() => TodoList = TodoList.OrderBy(i => i.Erledigt).ToList()">Sortiren Status</butten>
</div>


<br />

<div class="grid-container grid-header">
    <div class="grid-cell">ID</div>
    <div class="grid-cell">Titel</div>
    <div class="grid-cell">Beschreibung</div>
    <div class="grid-cell">Status</div>
    <div class="grid-cell">Aktionen</div>

</div>


@foreach (var todoItem in TodoList)
{
    <div class="grid-container grid-row">
        <div class="grid-cell">@todoItem.Id</div>

        @if (editId == todoItem.Id)
        {
            <div class="grid-cell"><input class="form-control" @bind="EditTitle" /></div>
            <div class="grid-cell"><input class="form-control" @bind="editDescription" /></div>
        }
        else
        {
            <div class="grid-cell">@todoItem.Titel</div>
            <div class="grid-cell">@todoItem.Discription</div>
        }

        <div class="grid-cell">
            @if (todoItem.Erledigt)
            {
                <span class="text-success">Erledigt</span>
            }
            else
            {
                <span class="text-warning">Offen</span>
            }
        </div>

        <div class="grid-cell">
            @if (editId == todoItem.Id)
            {
                <button class="btn btn-success btn-sm me-1" @onclick="() => SaveEdit(todoItem)">Fertig</button>
                <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Zurück</button>
            }
            else
            { 
                if(todoItem.Erledigt == false)
                {

                    <button class="btn btn-success btn-sm me-1" @onclick="() => MarkAsDone(todoItem)">Erledigen</button>
                }
                else if(todoItem.Erledigt == true)
                {   
                    <button class="btn btn-danger btn-sm me-1" @onclick="() => RemoveMarkAsDone(todoItem)">Zurücksetzten</button>
                }


                <button class="btn btn-danger btn-sm me-1" @onclick="() => RemoveTodo(todoItem)">Löschen</button>
                <button class="btn btn-primary btn-sm" @onclick="() => StartEdit(todoItem)">Bearbeiten</button>
            }
        </div>
    </div>
}



<style>
    .grid-container {
    display: grid;
    grid-template-columns: 40px 150px 200px 100px 280px;
    align-items: center;
    gap: 10px;
    margin-bottom: 7px;
    }

    .grid-header {
    font-weight: bold;
    border-bottom: 2px solid #ccc;
    padding-bottom: 10px;
    }

    .grid-row {
    padding: 5px 0;
    border-bottom: 1px solid #eee;
    }

    .grid-cell {
    overflow: hidden;
    }

    .form-control {
    width: 100%;
    padding: 4px;
    }
</style>







@code{
	//-------------------Services and Repositories------------------
    private TodoService TodoService { get; set; } = default!;
    private List<TodoItem> TodoList =new();
    private TodoIRepository todoIRepository { get; set; } = default;
	
	

	//-------------------Parameter-------------------

    private string newTitle = "" ;
    private string newDiscription = "";
    
    public string EditTitle = "";
    private string editDescription = "";
    
    private int editId;
	
    
	//----------------------OnInitializedAsync-------------------
    protected override async Task OnInitializedAsync()
    {
		TodoService service = new TodoService( IReposetory);
		TodoList = await TodoService.GetAllTodoItems();
		editId = 0; // Initialisieren der editId
		newTitle = String.Empty;
		newDiscription = String.Empty;
		EditTitle = String.Empty;
		editDescription = String.Empty;
        

    }
	

	//-----------------------------Add----------------------------
    private async void Add()
    {
        if (string.IsNullOrWhiteSpace(newTitle) || string.IsNullOrWhiteSpace(newDiscription))
        {
            return; // Eingabe überprüfen
        }
        var newTodo = new TodoItem
            {
                Titel = newTitle,
                Discription = newDiscription
            };

        await TodoService.AddTodoItem(newTodo);

        newTitle = String.Empty;
        newDiscription = String.Empty;
        StateHasChanged();

    }


	//------------------------------Edit----------------------------

    private async void StartEdit(TodoItem item)
                {
                await TodoService.StartEdit(item, EditTitle, editDescription);
                }

                private void CancelEdit()
                {
                    editId = 0;
                    StateHasChanged();
                    return;
                }

                private async void SaveEdit(TodoItem item)
                {
                    editId = 0; 
        await TodoService.SaveEdit(item, EditTitle, editDescription);
                }
	

	//-----------------------------Remove------------------------------
    private async void RemoveTodo(TodoItem item) 

    {
        await TodoService.DeleteTodoItem(item);
        StateHasChanged();

    }
	
    
	//-------------------Mark as Done & Remove Mark As Done-------------
    private async void MarkAsDone(TodoItem item)
    {
        await TodoService.MarkAsComplete(item);
        StateHasChanged();



    }

    private async void RemoveMarkAsDone(TodoItem item)
    {
        await TodoService.RemoveMarkAsComplete(item);
        StateHasChanged();
    }
	

}


