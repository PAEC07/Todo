@page "/"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using Repository
@using Todo
@using Todo.Auslesen_des_Nutzers
@using Todo.Data
@using Todo.Models
@using Todo.Repositories.Todo
@using Todo.Service
@using Todo.Service.ServiceTodo

@inject NavigationManager NavigationManager
@inject ServiceCategories ServiceCategories
@inject ApplicationDbContext DbContext
@inject TodoIRepository IReposetory
@inject TodoService todoService




@rendermode InteractiveServer

<h3>
<b>
TODOs
</b>
</h3>

<div class="grid-container-input">
    <div class="grid-header-input">
        <div class="grid-row-input">
            <div class="grid-cell-input">
                    <input type="text" class="form-control mb-1" @bind="newTitle" placeholder="Neues TODO Titel" />
                </div>
            <div class="grid-cell-input">
                    <input type="text" class="form-control mb-1" @bind="newDiscription" placeholder="Neue Beschreibung" />
            </div>

    <div class="dropdown" style="margin-bottom: 10px;">
                <button class="btn btn-dark" @onclick="ToggleDropdown">
            @SelectedOption
        </button>
        <ul class="dropdown-menu" style="display: @(isDropdownOpen ? "block" : "none");">
            @foreach (var option in Categories)
            {
                <li><a class="dropdown-item" href="#" @onclick="() => SelectOption(option.name)">@option.name</a></li>
            }
        </ul>
        <butten class=" manage-Categories " @onclick="NavigateToCategoriess">Manage Categoriess</butten>
        </div>
    </div>
        <div class="grid-container-input">
        <div class="grid-row-input">

                <button class="btn btn-dark" style="height:auto;width:500px" @onclick="Add">Hinzufügen</button>
                <button class="btn btn-danger" style="height:auto;width:90px" @onclick="clearInputFields">Löschen</button>
    </div>
    </div>
    </div>
            
    



    

    @code {
        private bool isDropdownOpen = false;
        private string SelectedOption = "Select an Option";

        private void ToggleDropdown()
        {
            isDropdownOpen = !isDropdownOpen;
        }

        private void SelectOption(string option)
        {
            SelectedOption = option;
            isDropdownOpen = false;
        }
    }

    <br />
</div>

<style>
    

    .grid-container-input {
		display: grid;
		grid-template-columns: 600px;
		align-items: center;
		gap: 15px;
		margin-bottom: 15px;
	}

    .grid-header-input {
      
		font-weight: bold;
		border-bottom: 2px  #ccc;
		padding-bottom: 10px;
	}

    .grid-row-input {
        padding: 5px 0;
        border-bottom: 1px solid #eee;
    }

    .grid-cell-input {
		overflow: hidden;
	}

    .manage-Categories {
        background-color: transparent; 
        border: none; 
        color: #5c5c5c; 

        cursor: pointer; 
        font-size: 14px; 
        padding: 5;
        font-family: Arial, sans-serif;
        transition: color 0.3s ease; 
        margin-left: 10px;
    }

        



</style>

<br/>

<div class="grid-container-table grid-header-table">
    <div class="grid-cell-table">
        <butten class="btn btn-close-white" style="font-weight: bold" @onclick="() => TodoList = TodoList.OrderBy(i => i.Id).ToList()">ID</butten>
    </div>
    <div class="grid-cell-table"><button class="btn btn-close-white" style="font-weight: bold" @onclick="() => TodoList = TodoList.OrderBy(t => t.Titel).ToList()"> Titel</button></div>
    <div class="grid-cell-table">Beschreibung</div>
    <div class="grid-cell-table"><butten class="btn btn-close-white" style="font-weight: bold" @onclick="() => TodoList = TodoList.OrderBy(i => i.CategoriesName).ToList()">Categories</butten></div>
    <div class="grid-cell-table"><butten class="btn btn-close-white" style="font-weight: bold" @onclick="() => TodoList = TodoList.OrderBy(i => i.Erledigt).ToList()">Status</butten></div>
    <div class="grid-cell-table">Aktionen</div>





</div>


@foreach (var todoItem in TodoList)
{
    <div class="grid-container-table grid-row-table">
        <div class="grid-cell-table">@todoItem.Id</div>

        @if (editId == todoItem.Id)
        {
            <div class="grid-cell-table"><input class="form-control" @bind="EditTitle" /></div>
            <div class="grid-cell-table"><input class="form-control" @bind="EditDiscription" /></div>
            <div class="grid-cell-table">
				<select class="form-select" @bind="todoItem.CategoriesName">
					<option value="">Select a Category</option>
					@foreach (var category in Categories)
					{
						<option value="@category.name">@category.name</option>
					}
				</select>
			</div>
        }
        else
        {
            <div class="grid-cell-table">@todoItem.Titel</div>
            <div class="grid-cell-table">@todoItem.Discription</div>
            <div class="grid-cell-table">@todoItem.CategoriesName</div>
        }

        <div class="grid-cell">
            @if (todoItem.Erledigt)
            {
                <span class="text-success">Erledigt</span>
            }
            else
            {
                <span class="text-warning">Offen</span>
            }
        </div>



        <div class="grid-cell-table">
            @if (editId == todoItem.Id)
            {
                <button class="btn btn-success btn-sm me-1" @onclick="() => SaveEdit(todoItem)">Fertig</button>
                <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Zurück</button>
            }
            else
            {

                if (todoItem.Erledigt == false)
                {

                    <button class="btn btn-success btn-sm me-1" @onclick="() => MarkAsDone(todoItem)">Erledigen</button>
                }
                else if (todoItem.Erledigt == true)
                {
                    <button class="btn btn-danger btn-sm me-1" @onclick="() => RemoveMarkAsDone(todoItem)">Zurücksetzten</button>
                }


                <button class="btn btn-primary btn-sm" @onclick="() => StartEdit(todoItem)">Bearbeiten</button>
                <button class="btn btn-danger btn-sm me-1" @onclick="() => RemoveTodo(todoItem)">Löschen</button>
            }
        </div>
    </div>
}

<style>
    .grid-container-table {
    display: grid;
    grid-template-columns: 100px 200px 165px 150px 150px 300px 200px 200px;
    align-items: center;
    gap: 15px;
    margin-bottom: 15px;
    }

    .grid-header-table {
    font-weight: bold;
    border-bottom: 2px solid #ccc;
    padding-bottom: 10px;q
    }

    .grid-row-table {
    padding: 5px 0;
    border-bottom: 1px solid #eee;
    }

    .grid-cell-table {
    overflow: hidden;
    }

    .form-control-table {
    width: 100%;
    padding: 4px;
    }
</style>







@code {
    //-------------------Services and Repositories------------------
    private TodoService TodoService { get; set; } = default!;
    private ServiceCategories serviceCategoriess { get; set; } = default!;
    private List<TodoItem> TodoList = new();
    private List<CategoriesItem> Categories = new();



    //-------------------Parameter-------------------

    private string newTitle = "";
    private string newDiscription = "";

    public string EditTitle = "";
    private string EditDiscription = "";
    private string selct = "";

    private int editId;


    //----------------------OnInitializedAsync-------------------
    protected override async Task OnInitializedAsync()
    {

        TodoService service = new TodoService(IReposetory);
        TodoService = service;
        Categories = await ServiceCategories.GetAllCategoriesItems();

        TodoList = await TodoService.GetAllTodoItems();
        editId = 0; // Initialisieren der editId
        newTitle = String.Empty;
        newDiscription = String.Empty;
        EditTitle = String.Empty;
        EditDiscription = String.Empty;

        var items = await ServiceCategories.GetAllCategoriesItems();


    }

    //----------------------NavigateToCategories----------------------

    public void NavigateToCategoriess()
    {

        NavigationManager.NavigateTo("/ManageCategories");
    }


	public void clearInputFields()
	{
		newTitle = String.Empty;
		newDiscription = String.Empty;
		SelectedOption = "Select an Option";
	}

    //-----------------------------Add----------------------------
    private async void Add()
    {
        if (string.IsNullOrWhiteSpace(newTitle) || string.IsNullOrWhiteSpace(newDiscription))
        {
            return; // Eingabe überprüfen
        }
        var newTodo = new TodoItem
            {
                Titel = newTitle,
                Discription = newDiscription,
                CategoriesName = SelectedOption,
            };

        await TodoService.AddTodoItem(newTodo);
        SelectedOption = "Select an Option";
        newTitle = String.Empty;
        newDiscription = String.Empty;
        await TodoService.GetAllTodoItems().ContinueWith(t => TodoList = t.Result);
        StateHasChanged();
    }


    //------------------------------Edit----------------------------

    private async void StartEdit(TodoItem item)
    {
        editId = item.Id;
        EditTitle = item.Titel;
        EditDiscription = item.Discription;
        TodoService.StartEdit(item, EditTitle, EditDiscription);
    }

    private void CancelEdit()
    {
        editId = 0;
        EditTitle = String.Empty;
        EditDiscription = String.Empty;
        StateHasChanged();
        return;
    }

    private async void SaveEdit(TodoItem item)
    {
        editId = 0;
        await TodoService.SaveEdit(item, EditTitle, EditDiscription);
    }


    //-----------------------------Remove------------------------------
    private async void RemoveTodo(TodoItem item)

    {
        await TodoService.DeleteTodoItem(item);
        await TodoService.GetAllTodoItems().ContinueWith(t => TodoList = t.Result);
        StateHasChanged();
    }


    //-------------------Mark as Done & Remove Mark As Done-------------
    private async void MarkAsDone(TodoItem item)
    {
        await TodoService.MarkAsComplete(item);
        StateHasChanged();



    }

    private async void RemoveMarkAsDone(TodoItem item)
    {
        await TodoService.RemoveMarkAsComplete(item);
        StateHasChanged();
    }
    //------------------Edit------------------------------------------
}

